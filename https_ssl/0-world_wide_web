#!/usr/bin/env bash
# script to configure subdomains and display information about the

display_info() {
    local domain="$1"
    local subdomain="$2"
    
    # Predefined mapping of specific subdomains to their expected servers
    local subdomain_map=(
        "www:lb-01"
        "web-01:web-01"
        "web-02:web-02"
    )
    
    # Perform dig lookup
    local result=$(dig "$subdomain.$domain" +short)
    
    # Check if result is empty
    if [ -z "$result" ]; then
        echo "No record found for $subdomain.$domain"
        return 1
    fi
    
    # Find matching server for known subdomains
    local server_name=""
    for mapping in "${subdomain_map[@]}"; do
        IFS=':' read -r map_subdomain map_server <<< "$mapping"
        if [ "$subdomain" == "$map_subdomain" ]; then
            server_name="$map_server"
            break
        fi
    done
    
    # Print output in the required format
    if [ -n "$server_name" ]; then
        echo "The subdomain $subdomain is a A record and points to $result"
    else
        echo "The subdomain $subdomain is a A record and points to $result"
    fi
}

# Main script logic
domain="$1"
subdomain="$2"

function get_sub_info {
  local domain=$1
  local subdomain=$2
  local full_domain="${subdomain}.${domain}"
  local record_info=$(dig +noall +answer ${full_domain} | awk '{print $4, $5}')
  local record_type=$(echo $record_info | awk '{print $1}')
  local record_ip=$(echo $record_info | awk '{print $2}')


  echo "The subdomain ${subdomain} is a ${record_type} record and points to ${record_ip}"
}

domain=$1
subdomain=$2

if [[ -z "$subdomain" ]]; then
  for sub in www lb-01 web-01 web-02; do
    get_sub_info $domain $sub
  done
else

	sub=("www" "lb-01" "web-01" "web-02")

  get_sub_info $domain $subdomain
fi
